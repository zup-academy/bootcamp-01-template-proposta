# postgres
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=keycloak
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

# link clients
url.analise-cartoes=http://localhost:9999/api
url.cartoes=http://localhost:8888/api

# actuator
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:servico de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=cartao-proposta

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

# bug no jdbc
opentracing.spring.cloud.jdbc.enabled=false

# periocidade
# padrão 10 seg
periodicidade.criar-cartao = ${PERIODICIDADE_CRIAR_CARTAO:10000}

# spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}


# chave
solicitacao.chave-criptografar-documento = ${CHAVE_DOCUMENTO:cH4v3}